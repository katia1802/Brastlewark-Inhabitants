{"version":3,"sources":["components/List/index.js","components/Gnome/index.js","components/GnomesList/index.js","components/Filter/index.js","App.js","services/gnomeService.js","serviceWorker.js","index.js"],"names":["List","_this$props","this","props","professions","friends","react_default","a","createElement","className","map","profession","index","key","friend","Component","Gnome","name","image","age","height","weight","hair_color","roundedHeight","round","roundedWeight","src","alt","components_List","GnomesList","gnomesResults","length","item","components_Gnome","thumbnail","Filter","onKeySearch","userSearch","for","placeholder","type","onChange","value","library","add","faCity","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gnomesRawData","search","getInputSearch","bind","assertThisInitialized","filterByFullName","_this2","fetch","then","response","json","data","rawData","Brastlewark","setState","saveData","allRawData","localStorage","getItem","JSON","parse","componentDidMount","setItem","stringify","event","currentTarget","_this3","filter","gnome","toLocaleLowerCase","includes","react_fontawesome_index_es","icon","components_Filter","components_GnomesList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8f53eb0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass List extends Component {\n  render() {\n    const { professions, friends } = this.props;\n\n    return (\n      <div className=\"gnome__lists\">\n        \n        <ul>\n          {professions.map((profession, index) => {\n            return <li key={index}>{profession}</li>;\n          })}\n        </ul>\n\n        <ul>\n          {friends.map((friend, index) => {\n            return <li key={index}>{friend}</li>;\n          })}\n        </ul>\n\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport List from \"../List\";\nimport round from 'lodash.round';\n\n\nclass Gnome extends Component {\n  render() {\n    const {\n      name,\n      image,\n      professions,\n      friends,\n      age,\n      height,\n      weight,\n      hair_color\n    } = this.props;\n\n    const roundedHeight = round(height)\n\n    const roundedWeight = round(weight)\n\n    return (\n      <div>\n        <h2 className=\"gnome__name\">{name}</h2>\n        <img className=\"gnome__image\" src={image} alt={name} />\n\n        <List \n        professions={professions}\n        friends={friends} />\n\n        <div className=\"gnome__details\">\n          <p>{age}</p>\n          <p>Height {roundedHeight}</p>\n          <p>Weight {roundedWeight}</p>\n          <p>{hair_color}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Gnome;\n","import React, { Component } from \"react\";\nimport \"./GnomesList.scss\";\nimport Gnome from '../Gnome'\n\nclass GnomesList extends Component {\n  render() {\n    const { gnomesResults } = this.props;\n    if (gnomesResults.length===0){\n      return <p>No gnome found</p>\n    }else{\n\n    return (\n\n      <ul className=\"gnome__list\">\n        {gnomesResults.map((item, index) => {\n          return (\n            <li className=\"gnome glowButton\" key={index}>\n\n              <Gnome \n              name = {item.name}\n              image = {item.thumbnail}\n              professions = {item.professions}\n              friends = {item.friends}\n              age = {item.age}\n              height= {item.height}\n              weight = {item.weight}\n              hair_color={item.hair_color}\n              />\n\n\n            </li>\n          );\n        })}\n      </ul>\n    )};\n  }\n}\n\nexport default GnomesList;\n","import React, { Component } from \"react\";\nimport \"./Filter.scss\";\n\nclass Filter extends Component {\n  render() {\n    const { onKeySearch, userSearch } = this.props;\n    return (\n      <div className=\"app__filter-item\">\n        <label for=\"input\" className=\"input\">\n          <input\n            className=\"app__filter-fullname\"\n            placeholder=\"Search for your gnome\"\n            type=\"text\"\n            onChange={onKeySearch}\n            value={userSearch}\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Filter;\n","import React, { Component } from \"react\";\nimport { createPromise } from \"./services/gnomeService\";\nimport GnomesList from \"./components/GnomesList\";\nimport Filter from \"./components/Filter\";\nimport \"./App.scss\";\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCity } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faCity)\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gnomesRawData: [],\n      search: \"\"\n    };\n    this.getInputSearch = this.getInputSearch.bind(this);\n    this.filterByFullName();\n  }\n\n  componentDidMount() {\n    createPromise().then(data => {\n      const rawData = data.Brastlewark;\n      this.setState({\n        gnomesRawData: rawData\n      });\n      this.saveData(rawData);\n    });\n  }\n\n  getSaveData() {\n    const allRawData = localStorage.getItem(\"allRawData\");\n\n    if (allRawData !== null) {\n      return JSON.parse(allRawData);\n    } else {\n      this.componentDidMount();\n    }\n  }\n\n  saveData(data) {\n    localStorage.setItem(\"allRawData\", JSON.stringify(data));\n  }\n\n  getInputSearch(event) {\n    const userSearch = event.currentTarget.value;\n    this.setState({\n      search: userSearch\n    });\n  }\n\n  filterByFullName() {\n    const filteredGnomes = this.state.gnomesRawData.filter(gnome => {\n      const gnomeName = gnome.name;\n      if (\n        gnomeName\n          .toLocaleLowerCase()\n          .includes(this.state.search.toLocaleLowerCase())\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return filteredGnomes;\n  }\n\n  render() {\n    const gnomesResults = this.filterByFullName();\n\n    return (\n      <div>\n        <h1 className=\"app__header\"><FontAwesomeIcon icon=\"city\"/>  Brastlewark Census Data  <FontAwesomeIcon icon=\"city\"/></h1>\n        <header>\n          <Filter\n            onKeySearch={this.getInputSearch}\n            userSearch={this.state.search}\n          />\n        </header>\n        <main>\n          <div className=\"App\">\n            <GnomesList gnomesResults={gnomesResults} />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const URL =\n  \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\n\nconst createPromise = () => fetch(URL).then(response => response.json());\n\nexport { createPromise };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}