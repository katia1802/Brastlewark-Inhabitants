{"version":3,"sources":["components/List/index.js","components/Gnome/index.js","components/GnomesList/index.js","components/Filter/index.js","components/Loader/index.js","App.js","services/gnomeService.js","serviceWorker.js","index.js"],"names":["List","_this$props","this","props","professions","friends","react_default","a","createElement","className","map","profession","index","key","friend","Component","library","add","faRuler","faWeight","faHeartbeat","faPalette","Gnome","name","image","age","height","weight","hair_color","roundedHeight","round","roundedWeight","src","alt","react_fontawesome_index_es","icon","components_List","GnomesList","gnomesResults","length","item","components_Gnome","thumbnail","Filter","onKeySearch","userSearch","for","placeholder","type","onChange","value","Loader","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gnomesRawData","search","isLoading","getInputSearch","bind","assertThisInitialized","filterByFullName","_this2","fetch","then","response","json","data","rawData","Brastlewark","setTimeout","setState","saveData","allRawData","localStorage","getItem","JSON","parse","componentDidMount","setItem","stringify","event","currentTarget","_this3","filter","gnome","toLocaleLowerCase","includes","components_Filter","components_Loader","components_GnomesList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20c927e2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./List.scss\";\n\nclass List extends Component {\n\n  render() {\n    const { professions, friends } = this.props;\n\n    return (\n      <div className=\"gnome__lists\">\n        <div>\n          <h3 className=\"gnome__list-professionstitle\">Professions</h3>\n          <ul className=\"gnome__list-professions\">\n            {professions.map((profession, index) => {\n              return <li key={index}>{profession}</li>;\n            })}\n          </ul>\n        </div>\n        <div>\n          <h3 className=\"gnome__list-friendstitle\">Friends</h3>\n          <ul className=\"gnome__list-friends\">\n            {friends.map((friend, index) => {\n              return <li key={index}>{friend}</li>;\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\nimport List from \"../List\";\nimport round from \"lodash.round\";\nimport \"./Gnome.scss\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faRuler, faWeight, faHeartbeat, faPalette} from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faRuler, faWeight, faHeartbeat, faPalette);\n\n\nclass Gnome extends Component {\n  render() {\n    const {\n      name,\n      image,\n      professions,\n      friends,\n      age,\n      height,\n      weight,\n      hair_color\n    } = this.props;\n\n    const roundedHeight = round(height);\n\n    const roundedWeight = round(weight);\n\n    return (\n      <div className=\"gnome__card\">\n        <div className=\"gnome__image-wrapper\">\n          <img className=\"gnome__image\" src={image} alt={name} />\n        </div>\n        <div className=\"gnome__text\">\n          <h2 className=\"gnome__name\">{name}</h2>\n\n          <div className=\"gnome__details\">\n            <p><FontAwesomeIcon icon=\"heartbeat\" /> {age}</p>\n            <p><FontAwesomeIcon icon=\"ruler\" /> {roundedHeight}cm</p>\n            <p><FontAwesomeIcon icon=\"weight\" /> {roundedWeight}kg</p>\n            <p><FontAwesomeIcon icon=\"palette\" /> {hair_color}</p>\n          </div>\n\n          <List professions={professions} friends={friends} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Gnome;\n","import React, { Component } from \"react\";\nimport \"./GnomesList.scss\";\nimport Gnome from '../Gnome'\n\nclass GnomesList extends Component {\n  render() {\n    const { gnomesResults } = this.props;\n    if (gnomesResults.length===0){\n      return (\n        <div className=\"gnome__notfound\">\n        <p className=\"gnome__notfound-text\">No gnome found</p>\n        <img alt=\"noFoundGnome\" src=\"https://i.pinimg.com/564x/5d/ef/7b/5def7b355868d740e6dcd32cd6038e63.jpg\"/>\n        </div>\n      )\n    }else{\n\n    return (\n\n      <ul className=\"gnome__list\">\n        {gnomesResults.map((item, index) => {\n          return (\n            <li className=\"gnome glowButton\" key={index}>\n\n              <Gnome \n              name = {item.name}\n              image = {item.thumbnail}\n              professions = {item.professions}\n              friends = {item.friends}\n              age = {item.age}\n              height= {item.height}\n              weight = {item.weight}\n              hair_color={item.hair_color}\n              />\n\n\n            </li>\n          );\n        })}\n      </ul>\n    )};\n  }\n}\n\nexport default GnomesList;\n","import React, { Component } from \"react\";\nimport \"./Filter.scss\";\n\nclass Filter extends Component {\n  render() {\n    const { onKeySearch, userSearch } = this.props;\n    return (\n      <div className=\"app__filter-item\">\n        <label for=\"input\" className=\"input\">\n          <input\n            className=\"app__filter-fullname\"\n            placeholder=\"Search for your gnome\"\n            type=\"text\"\n            onChange={onKeySearch}\n            value={userSearch}\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Filter;\n","import React, { Component } from \"react\";\nimport \"./Loader.scss\"\n\nclass Loader extends Component {\n  render() {\n    return (\n    \n    <div className=\"loader\">\n    </div>\n    )}\n}\n\nexport default Loader;\n","import React, { Component } from \"react\";\nimport { createPromise } from \"./services/gnomeService\";\nimport GnomesList from \"./components/GnomesList\";\nimport Filter from \"./components/Filter\";\nimport Loader from \"./components/Loader\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gnomesRawData: [],\n      search: \"\",\n      isLoading: true\n    };\n    this.getInputSearch = this.getInputSearch.bind(this);\n    this.filterByFullName();\n  }\n\n  componentDidMount() {\n    createPromise().then(data => {\n      const rawData = data.Brastlewark;\n\n      setTimeout(\n        () =>\n          this.setState({\n            gnomesRawData: rawData,\n            isLoading: false\n          }),\n        2000\n      );\n      this.saveData(rawData);\n    });\n  }\n\n  getSaveData() {\n    const allRawData = localStorage.getItem(\"allRawData\");\n\n    if (allRawData !== null) {\n      return JSON.parse(allRawData);\n    } else {\n      this.componentDidMount();\n    }\n  }\n\n  saveData(data) {\n    localStorage.setItem(\"allRawData\", JSON.stringify(data));\n  }\n\n  getInputSearch(event) {\n    const userSearch = event.currentTarget.value;\n    this.setState({\n      search: userSearch\n    });\n  }\n\n  filterByFullName() {\n    const filteredGnomes = this.state.gnomesRawData.filter(gnome => {\n      const gnomeName = gnome.name;\n      if (\n        gnomeName\n          .toLocaleLowerCase()\n          .includes(this.state.search.toLocaleLowerCase())\n      ) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return filteredGnomes;\n  }\n\n  render() {\n    const gnomesResults = this.filterByFullName();\n\n    return (\n      <div className=\"app__welcoming\">\n        <header className=\"app__header\">\n          <h1 className=\"app__header-title\">Brastlewark Population</h1>\n\n          <Filter\n            onKeySearch={this.getInputSearch}\n            userSearch={this.state.search}\n          />\n        </header>\n        <main>\n          <div className=\"app__main\">\n            {this.state.isLoading ? (\n              <Loader />\n            ) : (\n              <GnomesList gnomesResults={gnomesResults} />\n            )}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const URL =\n  \"https://raw.githubusercontent.com/rrafols/mobile_test/master/data.json\";\n\nconst createPromise = () => fetch(URL).then(response => response.json());\n\nexport { createPromise };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}